{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["require","console","log","report","ratios","map","r","getNumber","ratio","filter","isNaN","toString","MAX_RATIO","Math","max","apply","Object","toConsumableArray","MIN_RATIO","min","numberOrString","parseFloat","replace","sort","a","b","colorScale","scalePow","exponent","domain","range","App","_useState","useState","_useState2","slicedToArray","zoom","setZoom","_useState3","_useState4","infoCountry","setInfoCountry","counter","react_default","createElement","className","style","position","background","left","top","padding","border","overflowY","maxHeight","country","population","peak","percentIncreaseToPastYear","baptized","averagePioners","congregationsNumber","memorialAttendance","_ref","_ref2","label","value","display","marginBottom","flex","textAlign","marginRight","right","button","index","fontSize","fontWeight","height","width","lineHeight","borderRadius","backgroundColor","onClick","bottom","margin","flexWrap","key","paddingTop","borderTop","concat","lib","window","innerWidth","innerHeight","geography","geographies","projection","countryColor","_geography$properties","properties","name","NAME_LONG","iso","ISO_A3","find","item","tabable","g","setTimeout","onMouseEnter","onMouseLeave","default","fill","stroke","strokeWidth","outline","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.02242c46.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport {\n  ComposableMap,\n  ZoomableGroup,\n  Geographies,\n  Geography,\n  Annotation,\n  Annotations,\n} from 'react-simple-maps'\nimport report from './report.json'\nimport { scalePow } from 'd3-scale'\nconst Color = require(\"color\")\nconsole.log(report)\n\nconst ratios = report.map(r => getNumber(r.ratio)).filter(r => !isNaN(r))\nconsole.log(ratios.toString())\nconst MAX_RATIO = Math.max(...ratios)\nconst MIN_RATIO = Math.min(...ratios)\nconsole.log(MAX_RATIO, MIN_RATIO)\nconsole.log(ratios.sort((a, b) => a > b ? 1 : -1))\n\nfunction getNumber(numberOrString: any) {\n  if (typeof numberOrString === 'number') {\n    return numberOrString\n  } else {\n    return parseFloat(numberOrString.replace(/,/g, ''));\n  }\n}\n\nconst colorScale = scalePow<string>()\n  .exponent(1 / 10)\n  .domain([MIN_RATIO + 100, 200, 500, 700, 4000, 50000, MAX_RATIO]) // Max is based on China\n  /* tslint:disable-next-line */\n  .range([\"#3F3CFF\", \"#3CDCFF\", \"#3CFF8A\", \"#FFEB3C\", \"#FF993C\", \"#FF3C3C\", \"#EF3CFF\"])\n\nconst App: React.FC = () => {\n  const [zoom, setZoom] = useState(2)\n  const [infoCountry, setInfoCountry] = useState<any>(null)\n  function zoomIn() {\n    setZoom(zoom * 2)\n  }\n  function zoomOut() {\n    setZoom(zoom / 2)\n  }\n  let counter = 0\n  return (\n    <div className=\"App\">\n      <div>\n        {infoCountry ?\n          <div style={{\n            position: 'absolute',\n            background: 'white',\n            left: 10,\n            top: 10,\n            padding: 10,\n            border: '1px solid black',\n            overflowY: 'scroll',\n            maxHeight: '30%'\n          }}>\n            {[\n              ['Country or Territory:',\n                infoCountry.country,],\n              ['Population:',\n                infoCountry.population,],\n              ['2018 Peak Pubs.:',\n                infoCountry.peak,],\n              ['Ratio, 1 Publisher to:',\n                infoCountry.ratio,],\n              ['% Inc. Over 2017:',\n                infoCountry.percentIncreaseToPastYear,],\n              ['2018 No. Bptzd.:',\n                infoCountry.baptized,],\n              ['Av. Pio. Pubs.:',\n                infoCountry.averagePioners,],\n              ['No. of Congs.:',\n                infoCountry.congregationsNumber,],\n              ['Memorial Attendance:',\n                infoCountry.memorialAttendance,]\n            ].map(([label, value]) =>\n              <div style={{ display: 'flex', marginBottom: 5 }}>\n                <div style={{ flex: 1, textAlign: 'left', marginRight: 10 }}>{label}</div>\n                <div>{value}</div>\n              </div>\n            )}\n          </div>\n          :\n          <div />\n        }\n      </div>\n      <div style={{\n        position: 'absolute',\n        top: '45%',\n        right: 10,\n      }}>\n        {[['+', zoomIn], ['â€“', zoomOut]].map((button: any[], index) => (\n          <div\n            style={{\n              border: '1px solid black',\n              fontSize: 25,\n              fontWeight: 700,\n              marginBottom: 10,\n              height: 50,\n              width: 50,\n              textAlign: 'center',\n              lineHeight: '50px',\n              borderRadius: '50%',\n              backgroundColor: 'white',\n            }}\n            onClick={button[1]}\n          >\n            {button[0]}\n          </div>\n        ))}\n\n      </div>\n      <div style={{\n        position: 'absolute',\n        background: 'white',\n        left: 0,\n        bottom: 0,\n        margin: 10,\n        padding: '10px 10px 0 10px',\n        border: '1px solid black'\n      }}>\n        <div style={{ margin: '0 10px 10px 10px' }}>\n          Ratio, 1 Publisher to:\n        </div>\n        <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n          {[0, 100, 300, 500, 1000, 2000, 10000, 20000].map(ratio => (\n            <div key={ratio} style={{ display: 'flex', marginBottom: 5 }}>\n\n              <div style={{\n                margin: '0 5px',\n                paddingTop: 5,\n                fontWeight: 600,\n                borderTop: `10px solid ${ratio === 0 ? '#cccccc' : colorScale(ratio)}`,\n              }}>\n                {ratio || 'No Info'}\n              </div>\n            </div>\n          ))}\n\n        </div>\n      </div>\n      <ComposableMap width={window.innerWidth} height={window.innerHeight}>\n        <ZoomableGroup zoom={zoom}>\n          <Geographies geography={\"/world-10m.json\"}>\n            {(geographies, projection) => geographies.map((geography: any) => {\n              console.log(geography)\n              const { NAME_LONG: name, ISO_A3: iso } = geography.properties\n              const country = report.find((item) => item.iso === iso || item.country === name)\n              let countryColor\n              let ratio\n              if (country) {\n                console.log(++counter)\n                ratio = getNumber(country.ratio)\n                countryColor = colorScale(ratio)\n              }\n              return (\n                <Geography\n                  tabable={false}\n                  key={name}\n                  geography={geography}\n                  projection={projection}\n                  onClick={(g) => setTimeout(() => setInfoCountry(country), 0)}\n                  onMouseEnter={(g) => setTimeout(() => setInfoCountry(country), 0)}\n                  onMouseLeave={() => setInfoCountry(null)}\n                  style={{\n                    default: {\n                      fill: countryColor || '#cccccc',\n                      stroke: \"#444444\",\n                      strokeWidth: 0.5,\n                      outline: \"none\",\n                    },\n                  }}\n                />\n              )\n            })}\n          </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}